<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <artifactId>quaza-solutions-elearning-qpalx</artifactId>
        <groupId>com.quaza.solutions.qpalx.elearning</groupId>
        <version>1.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>qpalx-elearning-domain</artifactId>
    <version>1.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>



    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <hibernate.dialect>org.hibernate.dialect.MySQL5Dialect</hibernate.dialect>
        <hibernate.connection.driver_class>com.mysql.jdbc.Driver</hibernate.connection.driver_class>
        <hibernate.connection.charSet>UTF-8</hibernate.connection.charSet>
        <hibernate.export.schema.delimiter>;</hibernate.export.schema.delimiter>
        <hibernate.connection.url><![CDATA[jdbc:mysql://localhost/QPalx]]></hibernate.connection.url>
        <hibernate.connection.username>manyce400</hibernate.connection.username>
        <hibernate.connection.password>bridge15</hibernate.connection.password>
        <project.build.outputDirectory>{project.build.outputDirectory}</project.build.outputDirectory>
        <hibernate.export.schema.filename>${project.build.directory}/QPalx-db-schema.sql</hibernate.export.schema.filename>
    </properties>

    <dependencies>

        <!-- Apache Poi Dependency !-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>3.15-beta1</version>
        </dependency>

        <!-- Spring Dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Google Guava API -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- Apache Commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math3</artifactId>
            <version>3.6</version>
        </dependency>

        <!-- Joda Date API -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jadira.usertype</groupId>
            <artifactId>usertype.core</artifactId>
        </dependency>

        <!-- Jackson for REST and JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>

        <!-- Testing dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>

    </dependencies>

    <build>
        <!--
                Using De Juplo plugin, we generate Hibernate Schema DLL's.
                Note that this will scan all annotated classes  as defined in our persitence.xml file and generate DLL's for them.
                As long as classes are properly annotated in the scan packaged defined in persistence.xml there will be a dll.

                Plugin documentation is available at http://juplo.de/hibernate4-maven-plugin/

                De Juplo hibernate-maven-plugin only supports hiberate 5.  Enable only commented out below on updating to hibernate 5
        -->
        <plugins>
            <plugin>
                <groupId>de.juplo</groupId>
                <artifactId>hibernate-maven-plugin</artifactId>
                <version>2.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>drop</goal>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <!-- Add dependency to MySQL JDBC in order to drop and create tables -->
                    <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <version>5.1.37</version>
                    </dependency>
                </dependencies>
            </plugin>



            <!--<plugin>-->
                <!--<groupId>de.juplo</groupId>-->
                <!--<artifactId>hibernate4-maven-plugin</artifactId>-->
                <!--<version>1.0.5</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<goals>-->
                            <!--<goal>export</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
                <!--<dependencies>-->
                    <!--&lt;!&ndash; Add dependency to MySQL JDBC in order to drop and create tables &ndash;&gt;-->
                    <!--<dependency>-->
                        <!--<groupId>mysql</groupId>-->
                        <!--<artifactId>mysql-connector-java</artifactId>-->
                        <!--<version>5.1.37</version>-->
                    <!--</dependency>-->
                <!--</dependencies>-->
            <!--</plugin>-->

            <!-- DB Unit plugin will connect to the database and create default entries specified in the qpalx-test-data.xml file -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>dbunit-maven-plugin</artifactId>
                <version>1.0-beta-3</version>
                <dependencies>
                    <!-- Add dependency to MySQL JDBC in order to drop and create tables -->
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.37</version>
                    </dependency>
                </dependencies>

                <configuration>
                    <driver>${hibernate.connection.driver_class}</driver>
                    <url>${hibernate.connection.url}</url>
                    <username>${hibernate.connection.username}</username>
                    <password>${hibernate.connection.password}</password>
                    <!--<skip>${maven.test.skip}</skip>-->
                </configuration>
                <executions>

                    <!-- Insert initial static data -->
                    <execution>
                        <id>insert_initial</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>operation</goal>
                        </goals>
                        <configuration>
                            <format>flat</format>
                            <type>CLEAN_INSERT</type>
                            <src>../qpalx-elearning-domain/src/main/resources/qpalx-initial-static-data.xml</src>
                        </configuration>
                    </execution>

                    <!-- Insert all WAF SHS ELearning Curriculum, Courses & Activities -->
                    <execution>
                        <id>insert_jhs_curriculum</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>operation</goal>
                        </goals>
                        <configuration>
                            <format>flat</format>
                            <type>INSERT</type>
                            <src>src/main/resources/qpalx-waf-ecourses-shs.xml</src>
                        </configuration>
                    </execution>

                    <!-- Insert all WAF JHS ELearning Curriculum, Courses & Activities -->
                    <execution>
                        <id>insert_shs_curriculum</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>operation</goal>
                        </goals>
                        <configuration>
                            <format>flat</format>
                            <type>INSERT</type>
                            <src>../qpalx-elearning-domain/src/main/resources/qpalx-waf-ecourses-jhs.xml</src>
                        </configuration>
                    </execution>

                    <!-- Insert all SHS Schools in Accra -->
                    <execution>
                        <id>insert_accra_shs_schools</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>operation</goal>
                        </goals>
                        <configuration>
                            <format>flat</format>
                            <type>INSERT</type>
                            <src>src/main/resources/accra-schools-static-list.xml</src>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

        </plugins>

    </build>

</project>